exports.run = async ({ update, args }) => {
  const User = require('../../lib/models/User')

  const shopData = require('../../data/shop')
  const { api } = require('../../globals')

  const aliases = {
    buy: ['buy', '–∫—É–ø–∏—Ç—å', '–∫—É–ø–∏—Ç—Ç', '–∫—É–ø–ª—è', '–∫—É–ø–ª—á'],
    sell: ['sell', '–ø—Ä–æ–¥–∞—Ç—å', '–ø—Ä–æ–¥–∞—Ç', '–ø—Ä–æ–¥–∞—Ç–±', '–ø—Ä–æ–¥–∞–∂–∞'],
  }

  let option = args[0]
  if (!option) return sendPetsMenu()
  if (aliases.buy.some(e => e == option)) return sendBuyMenu(option)
  if (aliases.sell.some(e => e == option)) return sendSellMenu(option)

  return update.send('ü§î –¢–∞–∫–æ–π –æ–ø—Ü–∏–∏ –Ω–µ—Ç')

  async function sendPetsMenu() {
    let { senderId: id } = update
    let user = new User(id)

    let pets = user.data.pets
    let res = ['']

    if (!pets) return update.send('–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ')
  }

  async function sendMenu() {
    const name = await api.users.get({
      user_ids: update.senderId,
      name_case: 'gen',
    })
    let res = [name[0].first_name + ', —Ä–∞–∑–¥–µ–ª—ã –º–∞–≥–∞–∑–∏–Ω–∞:', '']

    for (let pet in shopData.pets) {
      const { name, id, icon, price } = shopData.pets[pet]
      res.push(`  [ ${id} ] ${icon} ${name} - ${price}T`)
    }

    res.push('')
    res.push('–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ [ ID ]:')
    res.push('@tihon_bot, –ø–∏—Ç–æ–º–µ—Ü –∫—É–ø–∏—Ç—å 7')

    update.send(res.join('\n'))
  }

  async function sendBuyMenu() {
    let name = await api.users.get({
      user_ids: update.senderId,
      name_case: 'gen',
    })
    let user = new User(update.senderId)

    if (!args[1]) {
      return await sendMenu()
    }

    if (isNaN(args[1])) {
      return update.send('üòï ID - —ç—Ç–æ —á–∏—Å–ª–æ, –∑–Ω–∞–µ—à—å.')
    }

    const id = parseInt(args[1])
    const pet = shopData.pets.find(i => i.id === id)
    const { amount, state } = await user.isEnoughFor(pet.price)
    const pets = user.pet

    if (pets.length >= 3)
      return update.reply('‚úñÔ∏è –ù–µ–ª—å–∑—è –∏–º–µ—Ç—å –±–æ–ª—å—à–µ 3-—Ö –ø–∏—Ç–æ–º—Ü–µ–≤')

    if (!state) {
      return update.send(
        'üßÆ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ - —É —Ç–µ–±—è ' +
          +amount +
          'T, –∞ –Ω—É–∂–Ω–æ ' +
          pet.price +
          'T'
      )
    }

    user.subtract(pet.price)
    user.addPet(pet.id)

    return update.send(
      `üéâ –¢–µ–ø–µ—Ä—å —É ${name[0].first_name} –≤–ª–∞–¥–µ–µ—Ç –∂–∏–≤–æ—Ç–Ω—ã–º ${pet.name}\n` +
        '\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–∞—Ç—å, –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã —Å–ª–æ–≤–æ "–ø—Ä–æ–¥–∞—Ç—å" –∏ –Ω–æ–º–µ—Ä –≤–µ—â–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ  '
    )
  }

  async function sendSellMenu() {
    let name = await api.users.get({
      user_ids: update.senderId,
    })
    let user = new User(update.senderId)

    if (!args[1]) {
      return update.send('üòï –¢—ã –Ω–µ –≤–≤–µ–ª –Ω–æ–º–µ—Ä –ø–∏—Ç–æ–º—Ü–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–∞—Ç—å')
    }

    if (isNaN(args[1])) {
      return update.send('üòï –ù–æ–º–µ—Ä - —ç—Ç–æ —á–∏—Å–ª–æ, –∑–Ω–∞–µ—à—å.')
    }

    let n = parseInt(args[1]) - 1
    let id = user.data.pets[n]
    let item = shopData.pets.find(i => i.id === id)

    if (!id) {
      return update.send('üßÆ –£ —Ç–µ–±—è –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞ –ø–æ–¥ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º')
    }

    if (!item) {
      return update.send('‚ùå –£ —Ç–µ–±—è –µ—Å—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∏—Ç–æ–º–µ—Ü')
    }

    user.add(item.price)
    user.removeItem(n)

    return update.send(
      `üéâ ${name[0].first_name} –ø—Ä–æ–¥–∞–ª –ø–∏—Ç–æ–º—Ü–∞ ${item.name} –∑–∞ ${item.price}T`
    )
  }
}

exports.command = {
  arguments: false,
  description: {
    en: 'Buy, sell or manage your pet',
    ru: '–ö—É–ø–∏—Ç—å, –ø—Ä–æ–¥–∞—Ç—å, –º–µ–Ω—è—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ',
  },
  alias: ['–∂–∏–≤–æ—Ç–Ω–æ–µ', '–ø–∏—Ç–æ–º–µ—Ü'],
  hidden: false,
}
