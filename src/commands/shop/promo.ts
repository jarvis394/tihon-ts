import User from '@models/User'
import promoFunctions from '@config/data/promo'
import { promoFunction, getPromo } from '@utils/promo'

exports.run = async ({ update, args }) => {
  const code = args[0]
  const user = new User(update.senderId)
  const earnings = user.earnings
  const promo = getPromo()
  
  if (!promo.code) return update.reply('üòî –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤')

  const promoCode = promo.code.toString()
  const earningsCode = earnings.promo ? earnings.promo.toString() : ''
  
  if (code === promo.code.toString() && earnings.promo !== promo.code) {
    user.setEarning('promo', promo.code)

    const func = promoFunctions[promo.n].function
    const state = await promoFunction(func, user)

    if (!state) return update.reply('üîª –¢—ã –Ω–µ —É—Å–ø–µ–ª! –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω')

    return update.send('üéà –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω')
  } else if (earnings.promo === promo.code) {
    return update.send('üîª –¢—ã —É–∂–µ –≤–≤–æ–¥–∏–ª —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥. –ñ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π!')
  } else {
    return update.send('üîª –í–≤–µ–¥–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥')
  }
}

exports.command = {
  arguments: '(code)|(code)',
  description: {
    en: 'Gives promo money',
    ru: '–î–∞—ë—Ç –ø—Ä–æ–º–æ –±–∞–±–∫–∏',
  },
  alias: ['–ø—Ä–æ–º–æ–±–∞–±–∫–∏', '–ø—Ä–æ–º–æ–∫–æ–¥', '–ø—Ä–æ–º–æ'],
}
