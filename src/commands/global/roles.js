/* exports.run = async ({ update, args }) => {
  
  const DBDialog = require('../../lib/DBDialog')

  const emptyUserData = {
    roles: [],
    warns: [],
    settings: {}
  }

  const dialog = new DBDialog(update.peerId)


    // Return if group mentioned (usually that's bot)
    if (args.some(el => el.startsWith('[club')))
      return update.reply('–ì—Ä—É–ø–ø–∞–º —Ä–æ–ª–∏ –Ω–µ –¥–∞—é')

    // Return if in dialog, not multidialog
    if (update.peerType === 'user')
      return update.reply('–ú—ã —Å —Ç–æ–±–æ–π —Ç—É—Ç —Å –≥–ª–∞–∑—É –Ω–∞ –≥–ª–∞–∑')

    if (args[0] && args[0].startsWith('[id')) {
      let id = args[0]
        .slice(1, -1)
        .split('|')[0]
        .slice(2)
      if (args[1] == 'add') return await addRole(id, 2)
      else if (args[1] == 'remove' || args[1] == 'delete')
        return await removeRole(id, 2)
      else if (args[0]) return await showRoles(id)
      else return update.send('–ù–µ –æ–ø–æ–∑–Ω–∞–ª')
    } else {
      let id = update.senderId

      // Add role if a first argument is "add"
      if (args[0] == 'add') return await addRole(id, 1)
      // Remove role if a first argument is "remove"
      else if (args[0] == 'remove' || args[0] == 'delete')
        return await removeRole(id, 1)
      // Show user's roles
      else if (!args[0]) return await showRoles(id)
      // Error if nothing mathcing
      else return update.send('–ù–µ –æ–ø–æ–∑–Ω–∞–ª')
    }

    /**
     * Add role
     */
/*
    async function addRole(id, index) {
      await dialog.checkData()

      let sliceLen =
        index == 1 ? args[0].length + 1 : args[0].length + args[1].length + 1
      let roleName = args.join(' ').slice(sliceLen)
      let userId = id

      // If no role name
      if (!roleName) return update.send('‚≠ïÔ∏è –ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ä–æ–ª—å')

      // Get data
      let user = await dialog.getUser(userId)

      // No user fetched
      if (!user) {
        await dialog.setUser(userId, emptyUserData)
        user = emptyUserData
      }

      user.roles.push(roleName)
      await dialog.updateRoles(userId, user.roles)

      let name = await api.users.get({
        user_ids: userId,
        name_case: 'gen'
      })

      let res = ''
      if (user && user.roles) {
        let c = 0
        user.roles.forEach(el => {
          if (el) (res += 'üî∏ ' + el + '\n'), c++
        })
        if (!c) res = 'üî∏ –ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ!'
      }

      return await update.send(
        `–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–æ–ª—å '${roleName}'\n
         –¢–µ–ø–µ—Ä—å —Ä–æ–ª–∏ —É ${name[0].first_name} ${name[0].last_name}:\n${res}`
      )
    }

    /**
     * Remove role
     */
/*
    async function removeRole(id, index) {
      await dialog.checkData()

      let sliceLen =
        index == 1 ? args[0].length + 1 : args[0].length + args[1].length + 1
      let roleName = args.join(' ').slice(sliceLen)
      let userId = id

      // If no role name
      if (!roleName) return update.send('‚≠ïÔ∏è –ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ä–æ–ª—å')

      // Get data
      let user = await dialog.getUser(userId)

      // No user fetched
      if (!user) {
        await dialog.setUser(userId, emptyUserData)
        user = emptyUserData
      }

      let i = user.roles.findIndex(el => el === roleName)
      if (i !== -1) user.roles.splice(i, 1)
      else return update.send('‚≠ïÔ∏è –¢–∞–∫–æ–π —Ä–æ–ª–∏ –Ω–µ—Ç')

      await dialog.updateRoles(userId, user.roles)

      let name = await api.users.get({
        user_ids: userId,
        name_case: 'gen'
      })

      let res = ''
      if (user && user.roles) {
        let c = 0
        user.roles.forEach(el => {
          if (el) (res += 'üî∏ ' + el + '\n'), c++
        })
        if (!c) res = 'üî∏ –ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ!'
      }

      return await update.send(
        `–£–¥–∞–ª–µ–Ω–∞ —Ä–æ–ª—å '${roleName}'\n
         –¢–µ–ø–µ—Ä—å —Ä–æ–ª–∏ —É ${name[0].first_name} ${name[0].last_name}:\n${res}`
      )
    }

    async function showRoles(userId) {
      await dialog.checkData()

      let user = await dialog.getUser(userId)

      // No user fetched
      if (!user) {
        await dialog.setUser(userId, emptyUserData)
        user = emptyUserData
      }

      let name = await api.users.get({
        user_ids: userId,
        name_case: 'gen'
      })

      let res = ''
      if (user && user.roles) {
        let c = 0
        user.roles.forEach(el => {
          if (el) (res += 'üî∏ ' + el + '\n'), c++
        })
        if (!c) res = 'üî∏ –ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ!'
      }

      return await update.send(
        `–†–æ–ª–∏ —É ${name[0].first_name} ${name[0].last_name}:\n${res}`
      )
    }
  
}*/

exports.command = {
  name: 'roles',
  arguments: '(add)/(remove) *user|(add)/(remove) *user',
  description: {
    en:
      "Adds or removes role at specific user. Without add/remove shows only user's roles",
    ru:
      '–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç —Ä–æ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
  },
  group: 'global',
  alias: ['—Ä–æ–ª–∏'],
  hidden: true,
}
