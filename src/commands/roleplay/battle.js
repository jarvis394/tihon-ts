/* eslint-disable require-atomic-updates */
exports.run = async ({ update, args }) => {
  const { handleError } = require('../../utils/handleError')
  const moment = require('moment')
  const BATTLE_PRICE = 5000
  const { randomArray, random } = require('../../utils/random')
  const User = require('../../lib/models/User')
  const { ID, BATTLE_COOLDOWN } = require('../../configs/constants')
  const { timeouts, api } = require('../../globals')

  const histories = {
    beginning: [
      '%PLAYER% —Å—Ä–∞–∑—É –µ–±–∞—à–∏—Ç —Å –Ω–æ–≥–∏!',
      '–ù–µ–ø–ª–æ—Ö–æ–µ –Ω–∞—á–∞–ª–æ! %PLAYER% –¥–µ–ª–∞–µ—Ç —Ä–µ–∑–∫–∏–π –≤—ã–ø–∞–¥!',
      '–®–∏–∫–∞—Ä–Ω—ã–π –ª–µ–≤—ã–π —Ö—É–∫ –æ—Ç %PLAYER% –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥—Ä–∞–∫—É!',
      '–•–æ—Ä–æ—à–µ–µ –Ω–∞—á–∞–ª–æ: %PLAYER% –±—å—ë—Ç —Å—Ä–∞–∑—É –≤ –≥—Ä—É–¥—å —Å–≤–æ–µ–º—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É!',
      '–ê–ª–∫–æ–≥–æ–ª—å, –ø–æ—Ö–æ–∂–µ, —É–¥–∞—Ä–∏–ª –≤ –≥–æ–ª–æ–≤—É: %PLAYER% –∫–∏–¥–∞–µ—Ç—Å—è –≤–æ –≤–Ω–µ–∑–∞–ø–Ω—É—é –∞—Ç–∞–∫—É!',
      '%PLAYER_ACC% –≤–∞–ª–∏—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –Ω–∞ –∑–µ–º–ª—é, –ø—Ä–∞–≤–¥–∞, –Ω–µ–Ω–∞–¥–æ–ª–≥–æ.',
      '%PLAYER% —Ñ–∏–≥–∞—á–∏—Ç –∫—Ä—É—á—ë–Ω—ã–π —É–¥–∞—Ä! –ö–∞–∫? –°–ø—Ä–æ—Å–∏—Ç–µ —É –ë–∞–ª—Ç–∏–∫–∏ 9!',
    ],
    middle: [
      '–ë–æ–π –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è —É–¥–∞—Ä–æ–º –ø—å—è–Ω–æ–π –≥–æ–ª–æ–≤—ã %PLAYER_ACC%',
      '–†–µ–∞–ª—å–Ω–æ –Ω–µ—Ä–µ–∞–ª—å–Ω–æ: —É–¥–∞—Ä –Ω–æ–≥–æ–π —Å —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –ø–æ—Å–ª–µ –≤–æ–¥–∫–∏ —Å –ø–æ–º–∏–¥–æ—Ä–Ω—ã–º —Å–æ–∫–æ–º!',
      '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ! –£–î–ê–† –ë–û–ì–ê! %PLAYER% - –ø—Ä–æ—Å—Ç–æ –º–æ–Ω—Å—Ç—Ä, –∫–æ–Ω–µ—á–Ω–æ.',
      '–ù–µ–ø–ª–æ—Ö–æ–π —Ö—É–∫ –æ—Ç %PLAYER%',
      '–ë–ª–µ—Å—Ç—è—â–∏–π —É–¥–∞—Ä –æ—Ç %PLAYER%!',
      '–£—á–∞—Å—Ç–Ω–∏–∫–∏ –±–æ—è —Ö–æ–¥—è—Ç –≤–æ–∫—Ä—É–≥ –¥–∞ –æ–∫–æ–ª–æ... –ù–µ—Ç, %PLAYER% –≤–Ω–µ–∑–∞–ø–Ω–æ –Ω–∞–ø–∞–¥–∞–µ—Ç!',
      '–ï—â—ë —É–¥–∞—Ä –æ—Ç %PLAYER%!',
    ],
    ending: [
      '–•–æ—Ä–æ—à–∏–π –∫–æ–Ω–µ—Ü –±—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å–∫–∞–∑–∫–µ! %PLAYER% –¥–æ–±–∏–≤–∞–µ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞!',
      '%PLAYER% –Ω–µ —É–ø—É—Å–∫–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ö–æ—Ä–æ—à–µ–Ω—å–∫–æ –≤–º–∞–∑–∞—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É... –î–∞, –±–æ–π –±—ã–ª –Ω–µ–ø–ª–æ—Ö.',
      '–ë—ã–≤–∞–µ—Ç –∏ —Ç–∞–∫–æ–µ: —É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ %PLAYER_ACC% –Ω–∞—Ä–∏—Å–æ–≤–∞–ª—Å—è –ø—Ä–æ—Å—Ç–∞—Ç–∏—Ç –∏ –±–æ–π –æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è!',
      '%PLAYER% –ø—Ä—ã–≥–∞–µ—Ç —Å–≤–µ—Ä—Ö—É –∏ —Å—Ä–∞–∑—É –∂–µ –∑–∞–≥–æ–Ω—è–µ—Ç –ø–µ—Ä–æ –ø–æ–¥ —Ä–µ–±—Ä–æ!',
      '%PLAYER% —Å—Å—ã—Ç –Ω–∞ –ª–∏—Ü–æ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–º—É',
      '%PLAYER% –æ–±–∫–æ–Ω—á–∞–ª –∂–æ–ø—É –≤—Ä–∞–≥–∞ –∏ —Å–∫—Ä—ã–ª—Å—è',
      '%PLAYER% –∑–∞—Ç—Ä–æ–ª–ª–∏–ª —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞))',
      '–ê –ø–æ—Ç–æ–º %PLAYER% —Å–Ω–∏–º–∞–µ—Ç —Å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —Ç—Ä—É—Å—ã, –≤ –Ω–∞—Ä—É—á–Ω–∏–∫–∞—Ö –∫–∏–¥–∞–µ—Ç—Å—è –Ω–∞ –≤—Ä–∞–≥–∞, –∫–∞–∫ —Ç–∏–≥—Ä, —Ä–∞–∑–¥–µ–≤–∞–µ—Ç –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–æ–≤–∞—Ç—å, –∞ –µ–≥–æ –±—ã–≤—à–∏–π –æ–ø–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–∂–∏–º–∞–µ—Ç –µ–≥–æ –∫ —Å–µ–±–µ. –ò –Ω–∞—á–∏–Ω–∞–µ—Ç –≤—Ö–æ–¥–∏—Ç—å –≥–ª—É–±–æ–∫–æ –∏ –∂–µ—Å—Ç–∫–æ',
    ],
    filling: [
      '%PLAYER% –∫–∞–∫ –ª–æ—Ö —É–¥–∞—Ä—è–µ—Ç –≤ –∫—Ä—ã—Å—É!',
      '%PLAYER% –µ—Å—Ç —Ö–ª–µ–± –∏ —Å–∏–ª—ã —Å—Ä–∞–∑—É –ø—Ä–∏–±–∞–≤–ª—è—é—Ç—Å—è! –û–Ω –≤—ã–Ω–æ—Å–∏—Ç —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —Å –æ–¥–Ω–æ–π –ª–µ–≤–æ–π!',
      '%PLAYER% –Ω–∞–Ω–æ—Å–∏—Ç —Å–æ–∫—Ä—É—à–∏—Ç–µ–ª—å–Ω–æ –±–æ–≥–∞—Ç—ã—Ä—Å–∫–∏–π —É–¥–∞—Ä –ø–æ –∑—É–±–∞–º!',
      '–°–∏–ª–∞ —É–¥–∞—Ä–∞ %PLAYER_ACC% –Ω–∞—Å—Ç–æ–ª—å–∫–æ –≤–µ–ª–∏–∫–∞, —á—Ç–æ —Ç–æ—Ç —Ä–≤–µ—Ç —Ä—É–±–∞—à–∫—É –Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–µ –∏ –≤–∞–ª–∏—Ç –µ–≥–æ –Ω–∞ –ø–æ–ª —Å –∫—Ä–∏–∫–∞–º–∏ "Fuck you"',
      '%PLAYER% –¥–µ–ª–∞–µ—Ç –ø–æ–¥—Å–µ—á–∫—É, –∏–∑-–∑–∞ —á–µ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Ä–∞–∑–≤–∞–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –∑–µ–º–ª–µ —Å–ª–æ–≤–Ω–æ —Å–æ–≤–æ–∫',
      '%PLAYER% –Ω–∞–Ω–æ—Å–∏—Ç —É–¥–∞—Ä –±—É—Ç—ã–ª–∫–æ–π –∏–∑ –ø–æ–¥ –û—Ö–æ—Ç—ã',
      '%PLAYER% —Ö–∞—Ä–∫–∞–µ—Ç –æ–ø–ø–æ–Ω–µ–Ω—Ç—É  –≤ –ª–∏—Ü–æ –∏ –±—å—ë—Ç –ø–æ —è–π—Ü–∞–º',
      '%PLAYER%, —Ä–∞–∑–æ—Ä–≤–∞–≤ —Ä—É–∫–∞–º–∏ –±–∞–Ω–∫—É –ø–∏–≤–∞, –Ω–∞–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ —Å –∫—Ä–∏–∫–∞–º–∏ "–¢—ã —á–µ –≤–∞–ª—á–∞—Ä–∞!!"',
      '%PLAYER% –¥–∞–µ—Ç –¥–µ–¥–æ–≤—Å–∫–æ–≥–æ –ª–µ—â–∞',
      '%PLAYER% –∑–æ–≤–µ—Ç —Å–æ–±—É—Ç—ã–ª—å–Ω–∏–∫–æ–≤ –∏ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≥—Ä—É–ø–ø–æ–≤–æ–π –∑–∞–±–∏–≤',
      '%PLAYER% –±—Ä–æ—Å–∞–µ—Ç –ø–µ—Å–æ–∫ –≤ –ª–∏—Ü–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –∞ –∑–∞—Ç–µ–º –±—å–µ—Ç –Ω–æ–≥–æ–π –≤ –∂–∏–≤–æ—Ç',
      '%PLAYER% —Ç—É—à–∏—Ç —Å–∏–≥—É –æ–± –ª–∏—Ü–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞',
      '%PLAYER% –ø—Ä–æ–≤–µ—Ä–∏–ª –ø—Ä–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ—Å—Å–∞ —Å–≤–æ–µ–≥–æ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞',
    ],
  }

  class Opponent extends User {
    constructor(id) {
      super(id)

      this.name = ''
      this.hp = 100
      this.strength = 0.95 - 0.5 + Math.random() * (1 - 0.95 + 1)
    }

    decreaseHP(amt) {
      amt = Math.round(amt * this.strength)

      if (this.isDead(this.hp - amt)) {
        return false
      } else {
        return (this.hp -= amt)
      }
    }

    isDead(hp = this.hp) {
      return hp <= 0
    }
  }

  let opponentId

  try {
    opponentId = parseInt(args[0].split('|')[0].slice(3))
    if (isNaN(opponentId)) throw new Error('argument \'opponentId\' is NaN')
    if (update.senderId === opponentId) throw new Error('ids are same')
  } catch (e) {
    return update.reply(
      'üëø –¢–µ–±–µ –Ω—É–∂–µ–Ω —á–µ–ª–æ–≤–µ–∫ –¥–ª—è –¥—Ä–∞–∫–∏ (–∏–ª–∏ –≤—ã–ø–∏–≤–∫–∞)\n\n–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: @tihon_bot –¥—Ä–∞–∫–∞ *id'
    )
  }

  if (opponentId < 0) return update.reply('üëø –ù–µ–ª—å–∑—è –¥—Ä–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º!')
  if (opponentId === ID * 1) return update.reply('ü§ó –ù–µ –±—É–¥—É)')

  const { senderId } = update
  const player = new Opponent(senderId)
  const opponent = new Opponent(opponentId)

  const { state, amount } = await player.isEnoughFor(BATTLE_PRICE)
  if (!state)
    return update.reply(
      `üßÆ –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥: —É —Ç–µ–±—è ${amount}T, –∞ –Ω—É–∂–Ω–æ ${BATTLE_PRICE}T`
    )

  player.subtract(BATTLE_PRICE)

  timeouts.set('battle', {
    timestamp: Date.now(),
    timeout: BATTLE_COOLDOWN,
  })

  const n = await api.execute({
    code: `return [API.users.get({ user_ids: "${player.id},${opponent.id}" }), API.users.get({ user_ids: "${player.id},${opponent.id}", name_case: "acc" })];`,
  })

  const names = {
    player: {
      nom: n.response[0][0].first_name + ' ' + n.response[0][0].last_name,
      acc: n.response[1][0].first_name + ' ' + n.response[1][0].last_name,
      short:
        n.response[0][0].first_name.substring(0, 1) +
        n.response[0][0].last_name.substring(0, 1),
    },
    opponent: {
      nom: n.response[0][1].first_name + ' ' + n.response[0][1].last_name,
      acc: n.response[1][1].first_name + ' ' + n.response[1][1].last_name,
      short:
        n.response[0][1].first_name.substring(0, 1) +
        n.response[0][1].last_name.substring(0, 1),
    },
  }

  player.name = names.player
  opponent.name = names.opponent

  let history = [player.name.nom + ' ‚öîÔ∏è ' + opponent.name.nom, '']

  function getCategory(i) {
    switch (i) {
    case 0:
      return 'beginning'
    case 1:
      return 'middle'
    default:
      return 'filling'
    }
  }

  function getHistory(attacker, c) {
    const text = randomArray(histories[c])

    return text
      .replace(/%PLAYER%/g, attacker.name.nom)
      .replace(/%PLAYER_ACC%/g, attacker.name.acc)
  }

  function getStats() {
    return `üõ°Ô∏è ${player.name.short} - ${player.hp}HP | ${opponent.name.short} - ${opponent.hp}HP`
  }

  function end(state) {
    const level = getHistory(state.winner, 'ending')

    history.push('üîª ' + level)
    history.push(
      `\nüéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å - ${state.winner.name.nom} | ${state.winner.hp}HP\nüîπ –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π - ${state.loser.name.nom} | 0HP`
    )

    if (state.winner.id === player.id) state.winner.addReputation(5)
    else state.winner.addReputation(15)

    state.winner.add(500)

    return update.send(history.join('\n'))
  }

  function next(i) {
    if (!player.isDead() && !opponent.isDead()) {
      const damage = random(30, 50),
        attacker = Math.random() >= 0.5 ? player : opponent,
        receiver = attacker.id === player.id ? opponent : player,
        c = Math.random()

      if (c < 0.1) {
        history.push(receiver.name.nom + ' –æ—Ç–∫–ª–æ–Ω—è–µ—Ç —É–¥–∞—Ä!\n')

        return next(i)
      }

      const hpState = receiver.decreaseHP(damage)

      if (!hpState) {
        return end({ winner: attacker, loser: receiver })
      } else {
        const category = getCategory(i)
        const level = getHistory(attacker, category)

        history.push('‚Ä¢ ' + level)
        history.push(getStats())
        history.push('')

        return next(i + 1)
      }
    }
  }

  const chance = Math.random()
  if (chance < 0.01) {
    const winner = Math.random() >= 0.5 ? player : opponent,
      loser = winner.id === player.id ? opponent : player

    history.push('üîò –ü–û–õ–ù–ê–Ø –ê–ù–ù–ò–ì–ò–õ–Ø–¶–ò–Ø –ü–†–û–¢–ò–í–ù–ò–ö–ê —Å —à–∞–Ω—Å–æ–º ' + chance + '\n')

    return end({ winner, loser })
  }

  next(0)
}

exports.command = {
  arguments: '(id)|(id)',
  description: {
    en: 'Battle someone!',
    ru: '–£—Å—Ç—Ä–æ–π —Å–µ–ª—å—Å–∫—É—é –¥—Ä–∞–∫—É!',
  },
  alias: ['–±–∏—Ç–≤–∞', '–±–∞—Ç–ª', '–¥—Ä–∞–∫–∞', '–ø–æ–¥—Ä–∞—Ç—å—Å—è', '–ø–æ–¥—Ä–∞—Ç—Å—è'],
}
